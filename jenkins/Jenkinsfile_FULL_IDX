
pipeline {
    agent any

    stages {
        stage('Stop and Destroy Docker Containers') {
            steps {
                powershell '''
                    $images = @(
                        "daas_idx_account",
                        "daas_idx_facility",
                        "daas_idx_asset",
                        "daas_idx_service",
                        "daas_idx_user"
                    )

                    foreach ($image in $images) {
                        Write-Host "Stopping and removing containers for image: $image"

                        # Get the list of container IDs
                        $containers = docker ps -a --filter "ancestor=$image" --format "{{.ID}}"

                        if ($containers -ne "") {
                            $containers -split "`n" | ForEach-Object {
                                $containerID = $_.Trim()

                                if ($containerID -ne "") {
                                    try {
                                        Write-Host "Stopping container $containerID"
                                        docker stop $containerID 2>$null

                                        Write-Host "Removing container $containerID"
                                        docker rm $containerID 2>$null
                                    }
                                    catch {
                                        Write-Host "⚠️ Error occurred while stopping/removing container: $containerID"
                                    }
                                }
                            }
                        } else {
                            Write-Host "No containers found for image: $image"
                        }
                    }
                '''
            }
        }
        stage('Trigger Child Jobs') {
            steps {
                script {

                    def accountJobResult = build job: 'daas_py_idx_git', parameters: [
                        string(name: 'BUILD_OPTION', value: 'Full'),
                        string(name: 'DOMAIN', value: 'account'),
                        string(name: 'DOCKER_IMG_NAME', value: 'daas_idx_account')
                    ], wait: true  

                    echo "account job completed with status: ${accountJobResult.result}"

                    def facilitJobResult = build job: 'daas_py_idx_git', parameters: [
                        string(name: 'BUILD_OPTION', value: 'DockerBuild-DockerRun'),
                        string(name: 'DOMAIN', value: 'facility'),
                        string(name: 'DOCKER_IMG_NAME', value: 'daas_idx_facility')
                    ], wait: true 

                    echo "facility job completed with status: ${facilitJobResult.result}"

                    def assetJobResult = build job: 'daas_py_idx_git', parameters: [
                        string(name: 'BUILD_OPTION', value: 'DockerBuild-DockerRun'),
                        string(name: 'DOMAIN', value: 'asset'),
                        string(name: 'DOCKER_IMG_NAME', value: 'daas_idx_asset')
                    ], wait: true 

                    echo "asset job completed with status: ${assetJobResult.result}"

                    def serviceJobResult = build job: 'daas_py_idx_git', parameters: [
                        string(name: 'BUILD_OPTION', value: 'DockerBuild-DockerRun'),
                        string(name: 'DOMAIN', value: 'service'),
                        string(name: 'DOCKER_IMG_NAME', value: 'daas_idx_service')
                    ], wait: true 

                    echo "service job completed with status: ${serviceJobResult.result}"

                    def userJobResult = build job: 'daas_py_idx_git', parameters: [
                        string(name: 'BUILD_OPTION', value: 'DockerBuild-DockerRun'),
                        string(name: 'DOMAIN', value: 'user'),
                        string(name: 'DOCKER_IMG_NAME', value: 'daas_idx_user')
                    ], wait: true 

                    echo "user job completed with status: ${userJobResult.result}"
                }
            }
        }
    }
}
