pipeline {
    agent any
    environment {
        PYTHON_BIN = "D:\\home\\Python\\Python312\\python.exe"
        VENV_DIR = "D:\\home\\cicd\\build\\.venv"

        PROJECT_DIR_ROOT = "D:\\src\\github\\daas_py"
        PROJECT_COMMON = "daas_py_common"
        PROJECT_CONFIG = "daas_py_config"
        PROJECT_API = "daas_py_api"
        PROJECT_DIR_COMMON = "daas_py_common"
        PROJECT_DIR_CONFIG = "daas_py_config"
        PROJECT_DIR_API = "daas_py_api"
        DOCKER_FILE = "D:\\src\\github\\daas_build\\docker\\Dockerfile.daas_py_api.asset"
        DOCKER_IMG_NAME = "daas_api_asset"
        DOCKER_IMG_PORT = 8001
        DOCKER_ENV_FILE = "D:\\src\\github\\daas_build\\env\\.env.int"

        BUILD_DIR = "D:\\home\\cicd\\build"
        OUTPUT_DIR = "D:\\home\\cicd\\output"
    }
    stages {
        stage('Prepare Build Directory') {
            steps {
                powershell '''
                    # Remove old build directory if it exists
                    if (Test-Path "${env:BUILD_DIR}") { Remove-Item -Recurse -Force "${env:BUILD_DIR}" }
                    
                    # Create new build directory
                    New-Item -ItemType Directory -Path "${env:BUILD_DIR}" | Out-Null
                    
                    # Copy project files
                    Copy-Item -Recurse -Force $(Join-Path "${env:PROJECT_DIR_ROOT}" "${env:PROJECT_DIR_COMMON}") "${env:BUILD_DIR}"
                    Copy-Item -Recurse -Force $(Join-Path "${env:PROJECT_DIR_ROOT}" "${env:PROJECT_DIR_CONFIG}") "${env:BUILD_DIR}"
                    Copy-Item -Recurse -Force $(Join-Path "${env:PROJECT_DIR_ROOT}" "${env:PROJECT_DIR_API}") "${env:BUILD_DIR}"
                '''
            }
        }
        stage('Setup Virtual Environment and Install') {
            steps {
                powershell '''
                    # Remove old virtual environment if it exists
                    if (Test-Path "${env:VENV_DIR}") { Remove-Item -Recurse -Force "${env:VENV_DIR}" }
                    
                    # Create a new virtual environment
                    & "${env:PYTHON_BIN}" -m venv "${env:VENV_DIR}"
                    
                    # Activate virtual environment and install dependencies
                    & "${env:VENV_DIR}\\Scripts\\Activate.ps1"
                    & "${env:VENV_DIR}\\Scripts\\python.exe" -m pip install $(Join-Path "${env:BUILD_DIR}" "${env:PROJECT_DIR_COMMON}")
                    & "${env:VENV_DIR}\\Scripts\\python.exe" -m pip install $(Join-Path "${env:BUILD_DIR}" "${env:PROJECT_DIR_CONFIG}")
                    & "${env:VENV_DIR}\\Scripts\\python.exe" -m pip install $(Join-Path "${env:BUILD_DIR}" "${env:PROJECT_DIR_API}")
                '''
            }
        }

        stage('Build Python Packages') {
            steps {
                powershell '''
                    & "${env:VENV_DIR}\\Scripts\\Activate.ps1"
                    Set-Location "${env:BUILD_DIR}"
                    & "${env:VENV_DIR}\\Scripts\\python.exe" -m build $(Join-Path "${env:BUILD_DIR}" "${env:PROJECT_DIR_COMMON}")
                    & "${env:VENV_DIR}\\Scripts\\python.exe" -m build $(Join-Path "${env:BUILD_DIR}" "${env:PROJECT_DIR_CONFIG}")
                    & "${env:VENV_DIR}\\Scripts\\python.exe" -m build $(Join-Path "${env:BUILD_DIR}" "${env:PROJECT_DIR_API}")
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                powershell '''
                    & "${env:VENV_DIR}\\Scripts\\Activate.ps1"
                    docker build -f "${env:DOCKER_FILE}" --no-cache -t "${env:DOCKER_IMG_NAME}" "${env:BUILD_DIR}"
                '''
            }
        }

        // stage('Run Docker Image') {
        //     steps {
        //         powershell '''
        //             docker run --env-file ${env:DOCKER_ENV_FILE} -p 8001:8001 daas_api_asset
        //         '''
        //     }
        // }

        // stage('Move Built Files') {
        //     steps {
        //         powershell '''
        //             # Create output directory if not exists
        //             if (!(Test-Path "${env:OUTPUT_DIR}")) { New-Item -ItemType Directory -Path "${env:OUTPUT_DIR}" | Out-Null }
                    
        //             # Copy built files to output directory
        //             Copy-Item -Recurse -Force "${env:BUILD_DIR}\\output\\*" "${env:OUTPUT_DIR}"
        //         '''
        //     }
        // }
    }

    post {
        success {
            echo "Build completed successfully!"
        }
        failure {
            echo "Build failed!"
        }
    }
}
